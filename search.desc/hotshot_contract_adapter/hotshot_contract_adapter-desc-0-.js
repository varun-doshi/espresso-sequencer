searchState.loadedDescShard("hotshot_contract_adapter", 0, "Cross-domain (between Solidity and Rust) utilities for …\nHelpers for connecting types between Jellyfish and …\nHelpers and test mocks for Light Client logic\nintermediate representation of <code>Challenges</code> in solidity\nan intermediate representation of <code>BN254.G1Point</code> in …\nintermediate representation of <code>PlonkProof</code> in solidity\nan intermediate representation of the transcript parsed …\nintermediate representation of <code>VerifyingKey</code> in solidity.\nreturn a dummy proof instance with all random fields\ndummy challenges\nreturn a dummy proof instance with random ProofEvaluations …\nconvert a field element to U256, panic if field size is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>OpenKeys</code> for KZG10 over BN254 curve from Aztec’s …\nconvert U256 to a field (mod order)\nx coordinate of affine repr\ny coordinate of affine repr\n<code>LightClientConstructorArgs</code> holds the arguments required to …\nIntermediate representations for <code>LightClientState</code> in …\nParsed Stake State\nCreates a <code>LightClientConstructorArgs</code> instance with dummy …\nReturn a dummy new genesis that will pass …\nReturn a dummy new genesis stake state that will pass …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>LightClientConstructorArgs</code> into a vector of …\nan intermediate representation of <code>EdOnBN254Point</code> in …\nIntermediate representation of <code>G2Point</code> in Solidity\nconvert a field element to U256, panic if field size is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nx coordinate of affine repr\nx0 of x = x0 + u * x1 coordinate\nx1 of x = x0 + u * x1 coordinate\ny coordinate of affine repr\ny0 of y = y0 + u * y1 coordinate\ny1 of y = y0 + u * y1 coordinate")