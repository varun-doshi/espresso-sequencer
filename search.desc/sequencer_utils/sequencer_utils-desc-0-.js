searchState.loadedDescShard("sequencer_utils", 0, "Convenient interfaces for using <code>anvil</code> command which runs a …\nCopy from …\nconverting a keccak256-based structured commitment (32 …\nsend a transaction and wait for confirmation before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a type from either a string or integer in …\nImplement <code>to_fixed_bytes</code> for wrapped types\nPrepare a <code>SignerMiddleware</code> by connecting to a provider and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForce a reorg in the L1.\nRestart the server, possibly with different options.\nconverting a <code>U256</code> value into a keccak256-based structured …\nA client over HTTP for the BlockNative gas tracker API …\nSets the gas price category to be used when fetching the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new BlockNative gas oracle.\nPerform a request to the gas price API and deserialize the …\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nAn identifier for a particular contract.\nCache of contracts predeployed or deployed during this …\nSet of predeployed contracts.\nDeploy a contract by calling a function.\nDeploy a contract by calling a function.\nDefault deployment function <code>LightClient.sol</code> in production\nDefault deployment function <code>LightClientMock.sol</code> for testing\nDeploy a contract by executing its deploy transaction.\nDeploy a contract by executing its deploy transaction.\nUse an already-deployed EspToken.sol instead of deploying …\nUse an already-deployed EspToken.sol proxy instead of …\nUse an already-deployed FeeContract.sol instead of …\nUse an already-deployed FeeContract.sol proxy instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse an already-deployed LightClient.sol instead of …\nUse an already-deployed LightClient.sol proxy instead of …\nUse an already-deployed PermissonedStakeTable.sol proxy …\nUse an already-deployed PlonkVerifier.sol instead of …\nUse an already-deployed StakeTable.sol instead of …\nUse an already-deployed StakeTable.sol proxy instead of …\nWrite a .env file.\nControls how backtraces are logged on panic.\nLogging configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the logging configuration from the environment.\nInitialize logging and panic handlers based on this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypes which can be deserialized from either integers or …\nDeserialize a type from either a string or integer in …\nDeserialize a type from either a string or integer in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA stake table config stored in a file\nInformation to add and remove stakers in the permissioned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe list of public keys that are initially inserted into …")