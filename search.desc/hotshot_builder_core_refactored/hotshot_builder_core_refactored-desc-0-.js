searchState.loadedDescShard("hotshot_builder_core_refactored", 0, "Builder Phase 1 It mainly provides three API services to …\nAdjustable limits for block size ceiled by maximum block …\nWhen adjusting max block size, it will be decremented or …\nNever go lower than 10 kilobytes\nDecrement <code>Self::max_block_size</code> by current value * …\nReturns the argument unchanged.\nReturns the argument unchanged.\nPeriod between optimistic increments of the block size\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast time we’ve incremented the max block size, obtained …\nCurrent block size limits\nMaximum block size as defined by protocol. We’ll never …\nIf increment period has elapsed or <code>force</code> flag is set, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ALLOW_EMPTY_BLOCK_PERIOD</code> is a constant that is used to …\nProportion of overall allotted time to wait for optimal …\nConfiguration to initialize the builder\nThe channel is empty and closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\nThe channel has overflowed since the last element was …\nThe channel has overflowed since the last element was …\nThis constant governs duration of sleep in various retry …\nAn error returned from <code>Receiver::recv()</code>.\nAn error returned from <code>Receiver::try_recv()</code>.\nWe will not increment max block value if we aren’t able …\nSee <code>BuilderConfig::base_fee</code>\nBase fee; the sequencing fee for a block is calculated as …\nLimits on block size. See <code>BlockSizeLimits</code> documentation …\nStores blocks built by this builder\nCreate a new broadcast channel.\nBuild a block with provided builder state\nReturns the public key of the builder\nKeys that this builder will use to sign responses\nKeys that this builder will use to sign responses\nUnderlying coordinator, responsible for builder state …\nInternal implementation of the event loop, drives the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstance state, used to construct new blocks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns a <code>tide_disco</code> <code>App</code> with builder …\nReturns <code>true</code> if the channel is empty and closed.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if this error indicates the receiver missed …\nSee <code>BuilderConfig::max_api_waiting_time</code>\nMaximum time allotted for the builder to respond to an API …\nInterval at which the builder will optimistically …\nSee <code>BuilderConfig::maximize_txn_capture_timeout</code>\nTime the builder will wait for new transactions before …\nNumber of DA nodes used in VID computation\nSpawns an event loop handling HotShot events from the …\nCapacity of cache storing information for transaction …\nChannel capacity for incoming transactions for a single …\n(Approximate) duration over which included transaction …")