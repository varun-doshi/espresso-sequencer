searchState.loadedDescShard("node_metrics", 0, "Node Validator Service\nMainState represents the State of the application this is …\nOptions represents the configuration options that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\ninitial_node_public_base_urls is a list of URLs that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nleaf_stream_base_url is the base URL for the availability …\nport is the port that the node validator service will …\nRun the service by itself.\nstake_table_source_based_url is the base URL for the …\n[ProcessProduceLeafStreamTask] is a task that produce a …\nAvailabilityAPILeafStream is a trait that represents a …\nAvailabilityConnection is a simple short-hand type alias …\nConstant for the version of this API.\nBoxFutureConnection is a simple short-hand type alias for a\nBridgeLeafAndBlockStreamToSenderTask is a task that …\nLeafAndBlock is a tuple that contains a [Leaf] and a …\nLeafAndBlockPairStream is a trait that represents a stream …\nProcessNodeIdentityUrlStreamTask is a task that processes …\nStateClientMessageSender allows for the retrieval of a …\nSurfDiscoAvailabilityAPIPathResolver is a trait that …\nUpdateBlockHeightForEntry is a trait that allows for the …\nCONSTANT for protocol major version\nCONSTANT for protocol minor version\nSpecific type for version 0.1\n[block_height_for_entry] returns the block height for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget_node_identity_from_url retrieves a NodeIdentity from a …\nget_stake_table_from_sequencer retrieves the stake table …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[new] creates a new [ProcessConsumeLeafStreamTask] that …\n[new] creates a new ProcessNodeIdentityUrlStreamTask that …\nnode_identity_from_scrape creates a NodeIdentity from a …\npopulate_node_identity_from_scrape populates a NodeIdentity…\npopulate_node_identity_general_from_scrape populates the …\npopulate_node_location_from_scrape populates the location …\n[process_consume_leaf_stream] produces a stream of [Leaf]s …\n[process_node_identity_url_stream] processes a stream of …\n[resolve_path_for_height] resolves the path for the given …\n[update_block_height_for_entry] updates the block height …\nSubmitPublicUrlsToScrapeTask is a task that is capable of …\ncreate_node_validator_processing is a function that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClientId represents the unique identifier for a client …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClientMessage represents the messages that the client can …\nInternalClientMessage represents the message requests that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[to_internal_with_client_id] converts the ClientMessage …\nClientState represents the service state of the connected …\nClientThreadState represents the state of all of the …\nHandleConnectedError represents the scope of errors that …\nHandleRequestBlocksSnapshotsError represents the scope of …\nHandleRequestHistogramSnapshotError represents the scope …\nHandleRequestNodeIdentitySnapshotError represents the …\nInternalClientMessageProcessingTask represents an async …\nProcessClientMessageError represents the scope of errors …\nProcessDistributeBlockDetailHandlingTask represents an …\nProcessDistributeNodeIdentityHandlingTask represents an …\nProcessDistributeVotersHandlingTask represents an async …\ndrop_client_client_thread_state_write_guard is a utility …\ndrop_client_no_lock_guard is a utility function for …\ndrop_failed_client_sends is a function that will drop all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhandle_client_message_connected is a function that …\nhandle_client_message_disconnected is a function that …\nhandle_client_message_request_blocks_snapshot is a …\nhandle_client_message_request_histogram_snapshot is a …\nhandle_client_message_request_node_identity_snapshot is a …\nhandle_client_message_request_voters_snapshot is a …\nhandle_client_message_subscribe_latest_block is a function …\nhandle_client_message_subscribe_node_identity is a …\nhandle_client_message_subscribe_voters is a function that …\nhandle_received_block_detail is a function that processes …\nhandle_received_node_identity is a function that processes …\nhandle_received_voters is a function that processes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ClientState with the given client_id and …\nnew creates a new InternalClientMessageProcessingTask with …\n[new] creates a new …\n[new] creates a new …\n[new] creates a new ProcessDistributeVotersHandlingTask …\nprocess_client_message is a function that processes the …\n[process_distribute_block_detail_handling_stream] is a …\n[process_distribute_node_identity_handling_stream] is a …\n[process_distribute_voters_handling_stream] is a function …\n[process_internal_client_message_stream] is a function …\nDataState represents the state of the data that is being …\nMAX_HISTORY represents the last N records that are stored …\nMAX_VOTERS_HISTORY represents the last N records that are …\nProcessLeafAndBlockPairStreamTask represents the task that …\nProcessLeafError represents the error that can occur when …\nProcessNodeIdentityError represents the error that can …\nProcessNodeIdentityStreamTask represents the task that is …\ncreate_block_detail_from_block is a helper function that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[new] creates a new [ProcessLeafStreamTask] that will …\n[new] creates a new ProcessNodeIdentityStreamTask that …\nprocess_incoming_leaf_and_block is a helper function that …\nprocess_incoming_node_identity is a helper function that …\n[process_leaf_stream] allows for the consumption of a …\n[process_node_identity_stream] allows for the consumption …\nLocationDetails represents the details of the location of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNodeIdentity represents the identity of the node that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nnetwork_type is meant to represent the type of network …\nnote_type is meant to reflect the type of the node that is …\nBlocksSnapshot is a message that is sent in response to a …\nHistogramSnapshot is a message that is sent in response to …\nLatestBlock is a message that is meant to show the most …\nLatestNodeIdentity is a message that is meant to show the …\nLatestVoters is a message that is meant to show the most …\nNodeIdentitySnapshot is a message that is sent in response …\nServerMessage represents the messages that the server can …\nVotersSnapshot is a message that is sent in response to a …\nThis allows the client to know what client_id they have …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")