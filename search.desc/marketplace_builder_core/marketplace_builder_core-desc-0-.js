searchState.loadedDescShard("marketplace_builder_core", 0, "Marketplace builder It mainly provides this API service to …\nA trait for hooks into the builder service. Used to …\nHooks that do nothing\nReturns the argument unchanged.\nHandle any hotshot event <em>before</em> the builder event loop …\nCalls <code>U::from(self)</code>.\nImplement this to process transactions before they’ll be …\nConfiguration to initialize the builder\nThe channel is empty and closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\nA wrapper around event streaming API that provides …\nThe main type implementing the marketplace builder.\nThe channel has overflowed since the last element was …\nThe channel has overflowed since the last element was …\nAn error returned from <code>Receiver::recv()</code>.\nAn error returned from <code>Receiver::try_recv()</code>.\nMaximum time allotted to wait for bundle before returning …\nMaximum time allotted for the builder to respond to an API …\nAssembles a <code>Bundle</code> for a certain view from a list of …\nBase fee per bundle byte\nBase fee; the sequencing fee for a bundle is calculated as …\nCreate a new broadcast channel.\nIdentity keys for the builder\nKeys that this builder will use to sign responses\nCollect transactions to include in the bundle. Will wait …\nEstablish initial connection to the events service at …\nCoordinator we’ll rely on to manage builder states\nInternal implementation of the event loop, drives the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>BuilderHooks</code> for more information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns a <code>tide_disco</code> <code>App</code> with builder …\nReturns <code>true</code> if the channel is empty and closed.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if this error indicates the receiver missed …\nSpawns an event loop handling HotShot events from the …\nMaximum time we’re allowed to expend waiting for more …\nTime the builder will wait for new transactions before …\nCapacity of cache storing information for transaction …\nChannel capacity for incoming transactions for a single …\n(Approximate) duration over which included transaction …")