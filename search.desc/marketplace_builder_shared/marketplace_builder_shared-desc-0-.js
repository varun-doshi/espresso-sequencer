searchState.loadedDescShard("marketplace_builder_shared", 0, "Shared types dealing with block information\nUnique identifier for a block\nUnique identifier for a builder state\nReferences to the parent block that is extended to spawn …\nTransaction from private mempool\nTransaction from public mempool\n<code>ReceivedTransaction</code> represents receipt information …\nEnum to hold the different sources of the transaction\nCreate mock references for bootstrap (don’t correspond …\nBuilder commitment of the parent block payload\ntransaction’s hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlock hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast known view that had a block with transactions\nLeaf commitment of the parent leaf\ntransaction’s estimated length\nVID commitment of the parent block\nView number of the parent block\ntransaction’s source\nreceived time\nthe transaction\nNumber of transactions included in the parent block\nVID commitment of the parent block payload\nBlock view\nView on which the parent block was proposed\nA coordinator managing the lifecycle of <code>BuilderState</code>s.\nResult of looking up a builder state by ID.\nThe view number looked up was already decided\nSuccessful lookup\nCorresponding <code>BuilderState</code> doesn’t exist\nThis is an utility function that is used to determine …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function should be called whenever new DA Proposal is …\nThis function should be called whenever new decide events …\nGeneralized function to handle Quorum and DA proposals. …\nThis function should be called whenever new Quorum …\nEnqueue new transaction in all builder states managed by …\nLooks up the builder state with the highest view number. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLooks up a <code>BuilderState</code> by id.\nGet the lowest view we have stored\nConstructs a new <code>BuilderState</code> coordinator. …\nSpawn a new builder state off of matching pair of Quorum …\nThis module contains an optimized implementation of a …\nGet transaction status for given hash\nUpdate status of transaction.\nA map from <code>ViewCompositeKey</code> to arbitrary value, …\nA two-component key, of which one component is …\nReturns an iterator visiting all values for given view …\nReturns the argument unchanged.\nGet reference to a value by key\nGet mutable reference to a value by key\nReturns highest view number for which we have a value\nGet highest view value (no guarantees as to which one …\nInsert a new value\nCalls <code>U::from(self)</code>.\nReturns whether this map is empty\nReturns the number of entries in this map\nReturns lowest view number for which we have a value\nCreate a new empty map\nRemoves every view lower than the <code>cutoff_view</code> (exclusive) …\nReturns a nested iterator visiting all values for view …\nReturns an iterator visiting all values in this map\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCommits of transactions currently in the <code>Self::transactions</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransactions that have been included in recent blocks that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpawned-from references to the parent block.\nQueue of available transactions\nQueue of transactions that are not yet included from the …\nTransaction payload used in testing to track various …\nThis module defines types used when simulating consensus …\nShared constants for tests\nTime of transaction creation\nArbitrary data to pad transaction length with\nReturns the argument unchanged.\nMonotonically increasing transaction number, to uniquely …\nCalls <code>U::from(self)</code>.\nA collection of generator functions for mock data used in …\nCreate a new <code>TransactionPayload</code> with given <code>number</code>, …\nRun a builder test. Thin wrapper around …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGoverns API timeout for builder API. This is an arbitrary …\nGoverns fee per byte used by builders. This is an …\nGoverns the buffer size used for the test channels. All of …\nGoverns the included transaction GC period used in tests. …\nGoverns timeout when waiting to fill transaction queue on …\nControls period between optimistic increments of maximum …\nControls the number of attempts that the simulated …\nControls the number of nodes that are used in the VID …\nControls the maximum block size of this protocol instance. …\nGoverns the target space used by the mapping from txn to …\nStrategy for generating transactions\nStrategy for transaction submission <code>Public</code> will use public …\nConfiguration for transaction generation task\nWhere to submit transactions\nFill queue of transactions to submit for <code>view_number</code> based …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStrategy to use when generating transactions\nMaximum number of transactions to submit per view\nMaximum size of transaction to generate\nMaximum size of transaction to generate\nMinimum number of transactions to submit per view\nMinimum size of transaction to generate\nMinimum size of transaction to generate\nHotshot node index to submit transactions to\nGenerate references for given view number with random …\nCreate mock pair of DA and Quorum proposals\nCreate mock pair of DA and Quorum proposals with given …\nNumber of transactions we expect to be included\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA convenience type alias for a tuple of builder keys …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper around event streaming API that provides …\nMaximum period between events, once it elapsed we assume …\nEstablish initial connection to the events service at …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA set that allows for time-based garbage collection, …\nReturns <code>true</code> if the key is contained in the set\nForce garbage collection, even if the time elapsed since …\nReturns the argument unchanged.\nInsert a <code>key</code> into the set. Doesn’t trigger garbage …\nCalls <code>U::from(self)</code>.\nConstruct a new <code>RotatingSet</code>\nTrigger garbage collection.")