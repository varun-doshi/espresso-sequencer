searchState.loadedDescShard("hotshot_task", 0, "Task primitives for <code>HotShot</code>\nSimple Dependency types\nTask which can uses dependencies\nBasic task types\nDefines a dependency that completes when all of its deps …\nType which describes the idea of waiting for a dependency …\nA dependency that listens on a channel for an event that …\nDefines a dependency that completes when one of it’s …\nAdd another dependency\nAdd another dependency\nAdd multiple dependencies\nCreate an and dependency from this dependency and another\nComplete will wait until it gets some value <code>T</code> then return …\nReturns a vector of all of the results from it’s …\nReturns the value of the first completed dependency\nThe potentially externally completed dependency. If the …\nDependencies being combined\nDependencies being combined\nChannel of incoming events\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from a vec of deps\nCreat an <code>OrDependency</code> from a vec of dependencies\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark a dependency as completed.\nClosure which returns true if the incoming <code>T</code> is the thing …\nCreate a new <code>EventDependency</code>\nCreate an or dependency from this dependency and another\nA task that runs until it’s dependency completes and it …\nDefines a type that can handle the result of a dependency\nType we expect from completed dependency\nDependency this tasks waits for\nReturns the argument unchanged.\nHandles the results returned from …\nCalled once when the Dependency completes handles the …\nCalls <code>U::from(self)</code>.\nCreate a new <code>DependencyTask</code>\nSpawn the dependency task\nA collection of tasks which can handle shutdown\nType of event sent and received by the task\nA collection of tasks which can handle shutdown\nA basic task which loops waiting for events to come from …\nTrait for events that long-running tasks handle\nType for mutable task state that can be used as the state …\nThe state of the task, as a boxed dynamic trait object.\nJoins all subtasks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles an event, providing direct access to the specific …\nTasks this registry controls\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWait for the results of all the tasks registered\nCreate a new task\nCreate a new task registry\nCreate a new task registry\nReceives events that are broadcast from any task, …\nAdd a task to the registry\nAdd a task to the registry\nSpawn the task loop, consuming self.  Will continue until …\nTake a task, run it, and register it\nSends events all tasks including itself\nTry to cancel/abort the task this registry has\nShuts down all tasks managed by this instance.\nThe shutdown signal for this event type\nThe state of the task.  It is fed events from <code>receiver</code> and …\nTasks this registry controls")