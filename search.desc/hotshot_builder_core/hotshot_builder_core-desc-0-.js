searchState.loadedDescShard("hotshot_builder_core", 0, "<code>ALLOW_EMPTY_BLOCK_PERIOD</code> is a constant that is used to …\nResponse Message to be put on the response channel\nDA Proposal Message to be put on the da proposal channel\nDecide Message to be put on the decide channel\nUnifies the possible messages that can be received by the …\nQuorum proposal message to be put on the quorum proposal …\nRequest Message to be put on the request channel\nResponse Message to be put on the response channel\nEnum to hold the status out of the decide event\nEnum to hold the different sources of the transaction\n<code>allow_empty_block_until</code> is a variable that dictates the …\nUtility method that attempts to determine whether we are …\nconstant fee that the builder will offer per byte of data …\n<code>best_builder_states_to_extend</code> is a utility function that …\nlocally spawned builder Commitements\n<code>da_proposal_payload_commit</code> to (<code>da_proposal</code>, <code>node_count</code>)\nda proposal receiver\ndecide receiver\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nglobal state handle, defined in the service.rs\nRecent included txs set while building blocks\nExpiring txs to be garbage collected\nOld txs to be garbage collected\ninstance state to enforce <code>max_block_size</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntimeout for maximising the txns in the block\ntime of next garbage collection for txns\nSpawned-from references to the parent block.\nprocessing the DA proposal\nprocessing the decide event\nprocessing the quorum proposal\n<code>quorum_proposal_payload_commit</code> to <code>quorum_proposal</code>\nquorum proposal receiver\nchannel receiver for the block requests\nA helper function that is used by both …\nfiltered queue of available transactions, taken from …\nincoming stream of transactions\ntxn garbage collection every duration time\ntxns currently in the <code>tx_queue</code>\nvalidated state that is required for a proposal to be …\n<code>AvailableBlocksError</code> is an error enum that represents the …\nAdjustable limits for block size ceiled by maximum block …\n<code>ClaimBlockError</code> is an error enum that represents the class …\nThe channel is empty and closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\n<code>GetChannelForMatchingBuilderError</code> is an error enum that …\n<code>GlobalState</code> represents the internalized state of the …\n<code>HandleDaEventError</code> represents the internal class of errors …\n<code>HandleQuorumEventError</code> represents the internal class of …\n<code>HandleReceivedTxns</code> is a struct that is used to handle the …\nWhen adjusting max block size, it will be decremented or …\nNever go lower than 10 kilobytes\nThe channel has overflowed since the last element was …\nThe channel has overflowed since the last element was …\n<code>ReceivedTransaction</code> represents receipt information …\nAn error returned from <code>Receiver::recv()</code>.\nAn error returned from <code>Receiver::try_recv()</code>.\nCreate a new broadcast channel.\nReturns the public key of the builder\nDecrement <code>Self::max_block_size</code> by current value * …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function that attempts to retrieve the broadcast …\n<code>handle_da_event</code> is a utility function that will attempt to …\n<code>handle_da_event_implementation</code> is a utility function that …\n<code>handle_quorum_event</code> is a utility function that will …\nUtility function that will attempt to broadcast the given …\nUtility function that will take the given list of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the channel is empty and closed.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if this error indicates the receiver missed …\nCreates a new <code>GlobalState</code> with the given parameters. The …\nNumber of nodes.\nAssociates the given <code>BuilderStateId</code> with the given …\nCleans up the <code>GlobalState</code> by removing all …\nTries to convert <code>self</code> into <code>NonEmptyIterator</code>. Calls …\nIf increment period has elapsed or <code>force</code> flag is set, …\nTries to convert <code>self</code> into <code>NonEmptyIterator</code>. Calls …\nEnsures that the given <code>BuildBlockInfo</code>’d id is within the …")