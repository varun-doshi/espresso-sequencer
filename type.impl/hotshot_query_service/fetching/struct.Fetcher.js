(function() {
    var type_impls = Object.fromEntries([["hotshot_query_service",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Fetcher%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#60\">Source</a><a href=\"#impl-Clone-for-Fetcher%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"hotshot_query_service/fetching/struct.Fetcher.html\" title=\"struct hotshot_query_service::fetching::Fetcher\">Fetcher</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#60\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hotshot_query_service::data_source::fetching::block::PayloadFetcher","hotshot_query_service::data_source::fetching::leaf::LeafFetcher","hotshot_query_service::data_source::fetching::vid::VidCommonFetcher"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Fetcher%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#59\">Source</a><a href=\"#impl-Debug-for-Fetcher%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"hotshot_query_service/fetching/struct.Fetcher.html\" title=\"struct hotshot_query_service::fetching::Fetcher\">Fetcher</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#59\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, __f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hotshot_query_service::data_source::fetching::block::PayloadFetcher","hotshot_query_service::data_source::fetching::leaf::LeafFetcher","hotshot_query_service::data_source::fetching::vid::VidCommonFetcher"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fetcher%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#69-77\">Source</a><a href=\"#impl-Fetcher%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"hotshot_query_service/fetching/struct.Fetcher.html\" title=\"struct hotshot_query_service::fetching::Fetcher\">Fetcher</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#70-76\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hotshot_query_service/fetching/struct.Fetcher.html#tymethod.new\" class=\"fn\">new</a>(permit: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Semaphore&gt;, backoff: ExponentialBackoff) -&gt; Self</h4></section></div></details>",0,"hotshot_query_service::data_source::fetching::block::PayloadFetcher","hotshot_query_service::data_source::fetching::leaf::LeafFetcher","hotshot_query_service::data_source::fetching::vid::VidCommonFetcher"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fetcher%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#79-183\">Source</a><a href=\"#impl-Fetcher%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"hotshot_query_service/fetching/struct.Fetcher.html\" title=\"struct hotshot_query_service::fetching::Fetcher\">Fetcher</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_fetch\" class=\"method\"><a class=\"src rightside\" href=\"src/hotshot_query_service/fetching.rs.html#98-182\">Source</a><h4 class=\"code-header\">pub fn <a href=\"hotshot_query_service/fetching/struct.Fetcher.html#tymethod.spawn_fetch\" class=\"fn\">spawn_fetch</a>&lt;Types&gt;(\n    &amp;self,\n    req: T,\n    provider: impl <a class=\"trait\" href=\"hotshot_query_service/fetching/provider/trait.Provider.html\" title=\"trait hotshot_query_service::fetching::provider::Provider\">Provider</a>&lt;Types, T&gt; + 'static,\n    callbacks: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = C&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"hotshot_query_service/fetching/request/trait.Request.html\" title=\"trait hotshot_query_service::fetching::request::Request\">Request</a>&lt;Types&gt; + 'static,\n    C: <a class=\"trait\" href=\"hotshot_query_service/fetching/trait.Callback.html\" title=\"trait hotshot_query_service::fetching::Callback\">Callback</a>&lt;T::<a class=\"associatedtype\" href=\"hotshot_query_service/fetching/request/trait.Request.html#associatedtype.Response\" title=\"type hotshot_query_service::fetching::request::Request::Response\">Response</a>&gt; + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Fetch a resource, if it is not already being fetched.</p>\n<p>This function will spawn a new task to fetch the resource in the background, using callbacks\nto process the fetched resource upon success. If the resource is already being fetched, the\nspawned task will terminate without fetching the resource, but only after registering the\nprovided callbacks to be executed by the existing fetching task upon completion, as long as\nthere are not already equivalent callbacks registered.</p>\n<p>We spawn a (short-lived) task even if the resource is already being fetched, because the\ncheck that the resource is being fetched requires an exclusive lock, and we do not want to\nblock the caller, which might be on the critical path of request handling.</p>\n<p>Note that while callbacks are allowed to be async, they are executed sequentially while an\nexclusive lock is held, and thus they should not take too long to run or block indefinitely.</p>\n<p>The spawned task will continue trying to fetch the object until it succeeds, so it is the\ncaller’s responsibility only to use this method for resources which are known to exist and\nbe fetchable by <code>provider</code>.</p>\n</div></details></div></details>",0,"hotshot_query_service::data_source::fetching::block::PayloadFetcher","hotshot_query_service::data_source::fetching::leaf::LeafFetcher","hotshot_query_service::data_source::fetching::vid::VidCommonFetcher"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[8963]}