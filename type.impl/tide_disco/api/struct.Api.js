(function() {
    var type_impls = Object.fromEntries([["sequencer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Api%3CState,+Error,+VER%3E\" class=\"impl\"><a href=\"#impl-Api%3CState,+Error,+VER%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;State, Error, VER&gt; Api&lt;State, Error, VER&gt;<div class=\"where\">where\n    State: 'static,\n    Error: 'static,\n    VER: StaticVersionType + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(api: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;Value&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Api&lt;State, Error, VER&gt;, ApiError&gt;</h4></section></summary><div class=\"docblock\"><p>Parse an API from a TOML specification.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_file\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_file</a>&lt;P&gt;(path: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an [Api] by reading a TOML specification from a file.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_version\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_version</a>(&amp;mut self, version: <a class=\"struct\" href=\"https://docs.rs/semver/1.0.26/semver/struct.Version.html\" title=\"struct semver::Version\">Version</a>) -&gt; &amp;mut Api&lt;State, Error, VER&gt;</h4></section></summary><div class=\"docblock\"><p>Set the API version.</p>\n<p>The version information will automatically be included in responses to <code>GET /version</code>. This\nversion can also be used to serve multiple major versions of the same API simultaneously,\nunder a version prefix. For more information, see\n<a href=\"crate::App::register_module\">App::register_module</a>.</p>\n<p>This is the version of the application or sub-application which this instance of [Api]\nrepresents. The versioning corresponds to the API specification passed to <a href=\"Api::new\">new</a>,\nand may be different from the version of the Rust crate implementing the route handlers for\nthe API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_public\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_public</a>(&amp;mut self, dir: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; &amp;mut Api&lt;State, Error, VER&gt;</h4></section></summary><div class=\"docblock\"><p>Serve the contents of <code>dir</code> at the URL <code>/public/{{NAME}}</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.at\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">at</a>&lt;F, T&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;State</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a handler for a route.</p>\n<p>When the server receives a request whose URL matches the pattern of the route <code>name</code>,\n<code>handler</code> will be invoked with the parameters of the request and a reference to the current\nstate, and the result will be serialized into a response.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>A simple getter route for a state object.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.getstate]\nPATH = [&quot;/getstate&quot;]\nDOC = &quot;Gets the current state.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>futures::FutureExt;\n\n<span class=\"kw\">type </span>State = u64;\n<span class=\"kw\">type </span>StaticVer01 = StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;;\n\napi.at(<span class=\"string\">\"getstate\"</span>, |req, state| <span class=\"kw\">async </span>{ <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">*</span>state) }.boxed());</code></pre></div>\n<p>A counter endpoint which increments a mutable state. Notice how we use <code>METHOD = \"POST\"</code> to\nensure that the HTTP method for this route is compatible with mutable access.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.increment]\nPATH = [&quot;/increment&quot;]\nMETHOD = &quot;POST&quot;\nDOC = &quot;Increment the current state and return the new value.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_std::sync::Mutex;\n<span class=\"kw\">use </span>futures::FutureExt;\n\n<span class=\"kw\">type </span>State = Mutex&lt;u64&gt;;\n<span class=\"kw\">type </span>StaticVer01 = StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;;\n\napi.at(<span class=\"string\">\"increment\"</span>, |req, state| <span class=\"kw\">async </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>guard = state.lock().<span class=\"kw\">await</span>;\n    <span class=\"kw-2\">*</span>guard += <span class=\"number\">1</span>;\n    <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">*</span>guard)\n}.boxed());</code></pre></div>\n<h5 id=\"warnings\"><a class=\"doc-anchor\" href=\"#warnings\">§</a>Warnings</h5>\n<p>The route will use the HTTP method specified in the TOML specification for the named route\n(or GET if the method is not specified). Some HTTP methods imply constraints on mutability.\nFor example, GET routes must be “pure”, and not mutate any server state. Violating this\nconstraint may lead to confusing and unpredictable behavior. If the <code>State</code> type has\ninterior mutability (for instance, <a href=\"async_std::sync::RwLock\">RwLock</a>) it is up to the\n<code>handler</code> not to use the interior mutability if the HTTP method suggests it shouldn’t.</p>\n<p>If you know the HTTP method when you are registering the route, we recommend you use the\nsafer versions of this function, which enforce the appropriate mutability constraints. For\nexample,</p>\n<ul>\n<li><a href=\"Self::get\">get</a></li>\n<li><a href=\"Self::post\">post</a></li>\n<li><a href=\"Self::put\">put</a></li>\n<li><a href=\"Self::delete\">delete</a></li>\n</ul>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If the route <code>name</code> does not exist in the API specification, or if the route already has a\nhandler registered, an error is returned. Note that all routes are initialized with a\ndefault handler that echoes parameters and shows documentation, but this default handler can\nreplaced by this function without raising [ApiError::HandlerAlreadyRegistered].</p>\n<p>If the route <code>name</code> exists, but it is not an HTTP route (for example, <code>METHOD = \"SOCKET\"</code>\nwas used when defining the route in the API specification), [ApiError::IncorrectMethod] is\nreturned.</p>\n<h5 id=\"limitations\"><a class=\"doc-anchor\" href=\"#limitations\">§</a>Limitations</h5>\n<p><a href=\"crate#boxed-futures\">Like many function parameters</a> in <a href=\"crate\">tide_disco</a>, the\nhandler function is required to return a [BoxFuture].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;F, T&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, &amp;&lt;State as ReadState&gt;::State) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + ReadState,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a handler for a GET route.</p>\n<p>When the server receives a GET request whose URL matches the pattern of the route <code>name</code>,\n<code>handler</code> will be invoked with the parameters of the request and immutable access to the\ncurrent state, and the result will be serialized into a response.</p>\n<p>The [ReadState] trait is used to acquire immutable access to the state, so the state\nreference passed to <code>handler</code> is actually <a href=\"ReadState::State\"><code>&lt;State as ReadState&gt;::State</code></a>.\nFor example, if <code>State</code> is <code>RwLock&lt;T&gt;</code>, the lock will automatically be acquired for reading,\nand the handler will be passed a <code>&amp;T</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>A simple getter route for a state object.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.getstate]\nPATH = [&quot;/getstate&quot;]\nDOC = &quot;Gets the current state.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_std::sync::RwLock;\n<span class=\"kw\">use </span>futures::FutureExt;\n\n<span class=\"kw\">type </span>State = RwLock&lt;u64&gt;;\n<span class=\"kw\">type </span>StaticVer01 = StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;;\n\napi.get(<span class=\"string\">\"getstate\"</span>, |req, state| <span class=\"kw\">async </span>{ <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">*</span>state) }.boxed());</code></pre></div>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the route <code>name</code> does not exist in the API specification, or if the route already has a\nhandler registered, an error is returned. Note that all routes are initialized with a\ndefault handler that echoes parameters and shows documentation, but this default handler can\nreplaced by this function without raising [ApiError::HandlerAlreadyRegistered].</p>\n<p>If the route <code>name</code> exists, but the method is not GET (that is, <code>METHOD = \"M\"</code> was used in\nthe route definition in <code>api.toml</code>, with <code>M</code> other than <code>GET</code>) the error\n<a href=\"ApiError::IncorrectMethod\">IncorrectMethod</a> is returned.</p>\n<h5 id=\"limitations-1\"><a class=\"doc-anchor\" href=\"#limitations-1\">§</a>Limitations</h5>\n<p><a href=\"crate#boxed-futures\">Like many function parameters</a> in <a href=\"crate\">tide_disco</a>, the\nhandler function is required to return a [BoxFuture].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">post</a>&lt;F, T&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, &amp;mut &lt;State as ReadState&gt;::State) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + WriteState,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a handler for a POST route.</p>\n<p>When the server receives a POST request whose URL matches the pattern of the route <code>name</code>,\n<code>handler</code> will be invoked with the parameters of the request and exclusive, mutable access\nto the current state, and the result will be serialized into a response.</p>\n<p>The [WriteState] trait is used to acquire mutable access to the state, so the state\nreference passed to <code>handler</code> is actually <a href=\"ReadState::State\"><code>&lt;State as ReadState&gt;::State</code></a>.\nFor example, if <code>State</code> is <code>RwLock&lt;T&gt;</code>, the lock will automatically be acquired for writing,\nand the handler will be passed a <code>&amp;mut T</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>A counter endpoint which increments the state and returns the new state.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.increment]\nPATH = [&quot;/increment&quot;]\nMETHOD = &quot;POST&quot;\nDOC = &quot;Increment the current state and return the new value.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_std::sync::RwLock;\n<span class=\"kw\">use </span>futures::FutureExt;\n\n<span class=\"kw\">type </span>State = RwLock&lt;u64&gt;;\n<span class=\"kw\">type </span>StaticVer01 = StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;;\n\napi.post(<span class=\"string\">\"increment\"</span>, |req, state| <span class=\"kw\">async </span>{\n    <span class=\"kw-2\">*</span>state += <span class=\"number\">1</span>;\n    <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">*</span>state)\n}.boxed());</code></pre></div>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the route <code>name</code> does not exist in the API specification, or if the route already has a\nhandler registered, an error is returned. Note that all routes are initialized with a\ndefault handler that echoes parameters and shows documentation, but this default handler can\nreplaced by this function without raising [ApiError::HandlerAlreadyRegistered].</p>\n<p>If the route <code>name</code> exists, but the method is not POST (that is, <code>METHOD = \"M\"</code> was used in\nthe route definition in <code>api.toml</code>, with <code>M</code> other than <code>POST</code>) the error\n<a href=\"ApiError::IncorrectMethod\">IncorrectMethod</a> is returned.</p>\n<h5 id=\"limitations-2\"><a class=\"doc-anchor\" href=\"#limitations-2\">§</a>Limitations</h5>\n<p><a href=\"crate#boxed-futures\">Like many function parameters</a> in <a href=\"crate\">tide_disco</a>, the\nhandler function is required to return a [BoxFuture].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">put</a>&lt;F, T&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, &amp;mut &lt;State as ReadState&gt;::State) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + WriteState,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a handler for a PUT route.</p>\n<p>When the server receives a PUT request whose URL matches the pattern of the route <code>name</code>,\n<code>handler</code> will be invoked with the parameters of the request and exclusive, mutable access\nto the current state, and the result will be serialized into a response.</p>\n<p>The [WriteState] trait is used to acquire mutable access to the state, so the state\nreference passed to <code>handler</code> is actually <a href=\"ReadState::State\"><code>&lt;State as ReadState&gt;::State</code></a>.\nFor example, if <code>State</code> is <code>RwLock&lt;T&gt;</code>, the lock will automatically be acquired for writing,\nand the handler will be passed a <code>&amp;mut T</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>An endpoint which replaces the current state with a new value.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.replace]\nPATH = [&quot;/replace/:new_state&quot;]\nMETHOD = &quot;PUT&quot;\n&quot;:new_state&quot; = &quot;Integer&quot;\nDOC = &quot;Set the state to `:new_state`.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_std::sync::RwLock;\n<span class=\"kw\">use </span>futures::FutureExt;\n\n<span class=\"kw\">type </span>State = RwLock&lt;u64&gt;;\n<span class=\"kw\">type </span>StaticVer01 = StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;;\n\napi.post(<span class=\"string\">\"replace\"</span>, |req, state| <span class=\"kw\">async move </span>{\n    <span class=\"kw-2\">*</span>state = req.integer_param(<span class=\"string\">\"new_state\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}.boxed());</code></pre></div>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If the route <code>name</code> does not exist in the API specification, or if the route already has a\nhandler registered, an error is returned. Note that all routes are initialized with a\ndefault handler that echoes parameters and shows documentation, but this default handler can\nreplaced by this function without raising [ApiError::HandlerAlreadyRegistered].</p>\n<p>If the route <code>name</code> exists, but the method is not PUT (that is, <code>METHOD = \"M\"</code> was used in\nthe route definition in <code>api.toml</code>, with <code>M</code> other than <code>PUT</code>) the error\n<a href=\"ApiError::IncorrectMethod\">IncorrectMethod</a> is returned.</p>\n<h5 id=\"limitations-3\"><a class=\"doc-anchor\" href=\"#limitations-3\">§</a>Limitations</h5>\n<p><a href=\"crate#boxed-futures\">Like many function parameters</a> in <a href=\"crate\">tide_disco</a>, the\nhandler function is required to return a [BoxFuture].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">delete</a>&lt;F, T&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, &amp;mut &lt;State as ReadState&gt;::State) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + WriteState,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a handler for a DELETE route.</p>\n<p>When the server receives a DELETE request whose URL matches the pattern of the route <code>name</code>,\n<code>handler</code> will be invoked with the parameters of the request and exclusive, mutable access\nto the current state, and the result will be serialized into a response.</p>\n<p>The [WriteState] trait is used to acquire mutable access to the state, so the state\nreference passed to <code>handler</code> is actually <a href=\"ReadState::State\"><code>&lt;State as ReadState&gt;::State</code></a>.\nFor example, if <code>State</code> is <code>RwLock&lt;T&gt;</code>, the lock will automatically be acquired for writing,\nand the handler will be passed a <code>&amp;mut T</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>An endpoint which clears the current state.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.state]\nPATH = [&quot;/state&quot;]\nMETHOD = &quot;DELETE&quot;\nDOC = &quot;Clear the state.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_std::sync::RwLock;\n<span class=\"kw\">use </span>futures::FutureExt;\n\n<span class=\"kw\">type </span>State = RwLock&lt;<span class=\"prelude-ty\">Option</span>&lt;u64&gt;&gt;;\n<span class=\"kw\">type </span>StaticVer01 = StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;;\n\napi.delete(<span class=\"string\">\"state\"</span>, |req, state| <span class=\"kw\">async </span>{\n    <span class=\"kw-2\">*</span>state = <span class=\"prelude-val\">None</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}.boxed());</code></pre></div>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>If the route <code>name</code> does not exist in the API specification, or if the route already has a\nhandler registered, an error is returned. Note that all routes are initialized with a\ndefault handler that echoes parameters and shows documentation, but this default handler can\nreplaced by this function without raising [ApiError::HandlerAlreadyRegistered].</p>\n<p>If the route <code>name</code> exists, but the method is not DELETE (that is, <code>METHOD = \"M\"</code> was used\nin the route definition in <code>api.toml</code>, with <code>M</code> other than <code>DELETE</code>) the error\n<a href=\"ApiError::IncorrectMethod\">IncorrectMethod</a> is returned.</p>\n<h5 id=\"limitations-4\"><a class=\"doc-anchor\" href=\"#limitations-4\">§</a>Limitations</h5>\n<p><a href=\"crate#boxed-futures\">Like many function parameters</a> in <a href=\"crate\">tide_disco</a>, the\nhandler function is required to return a [BoxFuture].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.socket\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">socket</a>&lt;F, ToClient, FromClient&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, Connection&lt;ToClient, FromClient, Error, VER&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;State</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    ToClient: 'static + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    FromClient: 'static + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    Error: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a handler for a SOCKET route.</p>\n<p>When the server receives any request whose URL matches the pattern for this route and which\nincludes the WebSockets upgrade headers, the server will negotiate a protocol upgrade with\nthe client, establishing a WebSockets connection, and then invoke <code>handler</code>. <code>handler</code> will\nbe given the parameters of the request which initiated the connection and a reference to the\napplication state, as well as a <a href=\"socket::Connection\">Connection</a> object which it can then\nuse for asynchronous, bi-directional communication with the client.</p>\n<p>The server side of the connection will remain open as long as the future returned by\n<code>handler</code> is remains unresolved. The handler can terminate the connection by returning. If\nit returns an error, the error message will be included in the\n<a href=\"tide_websockets::tungstenite::protocol::CloseFrame\">CloseFrame</a> sent to the client when\ntearing down the connection.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>A socket endpoint which receives amounts from the client and returns a running sum.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.sum]\nPATH = [&quot;/sum&quot;]\nMETHOD = &quot;SOCKET&quot;\nDOC = &quot;Stream a running sum.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>futures::{FutureExt, SinkExt, StreamExt};\n<span class=\"kw\">use </span>tide_disco::{error::ServerError, socket::Connection, Api};\n\napi.socket(<span class=\"string\">\"sum\"</span>, |_req, <span class=\"kw-2\">mut </span>conn: Connection&lt;i32, i32, ServerError, StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;&gt;, _state| <span class=\"kw\">async move </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sum = <span class=\"number\">0</span>;\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(amount) = conn.next().<span class=\"kw\">await </span>{\n        sum += amount<span class=\"question-mark\">?</span>;\n        conn.send(<span class=\"kw-2\">&amp;</span>sum).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}.boxed());</code></pre></div>\n<p>In some cases, it may be desirable to handle messages to and from the client in separate\ntasks. There are two ways of doing this:</p>\n<h6 id=\"split-the-connection-into-separate-stream-and-sink\"><a class=\"doc-anchor\" href=\"#split-the-connection-into-separate-stream-and-sink\">§</a>Split the connection into separate stream and sink</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_std::task::spawn;\n<span class=\"kw\">use </span>futures::{future::{join, FutureExt}, sink::SinkExt, stream::StreamExt};\n<span class=\"kw\">use </span>tide_disco::{error::ServerError, socket::Connection, Api};\n\napi.socket(<span class=\"string\">\"endpoint\"</span>, |_req, <span class=\"kw-2\">mut </span>conn: Connection&lt;i32, i32, ServerError, StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;&gt;, _state| <span class=\"kw\">async move </span>{\n    <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>sink, <span class=\"kw-2\">mut </span>stream) = conn.split();\n    <span class=\"kw\">let </span>recv = spawn(<span class=\"kw\">async move </span>{\n        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(msg)) = stream.next().<span class=\"kw\">await </span>{\n            <span class=\"comment\">// Handle message from client.\n        </span>}\n    });\n    <span class=\"kw\">let </span>send = spawn(<span class=\"kw\">async move </span>{\n        <span class=\"kw\">loop </span>{\n            <span class=\"kw\">let </span>msg = <span class=\"comment\">// get message to send to client\n            </span>sink.send(msg).<span class=\"kw\">await</span>;\n        }\n    });\n\n    join(send, recv).<span class=\"kw\">await</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}.boxed());</code></pre></div>\n<p>This approach requires messages to be sent to the client by value, consuming the message.\nThis is because, if we were to use the <code>Sync&lt;&amp;ToClient&gt;</code> implementation for <code>Connection</code>,\nthe lifetime for <code>&amp;ToClient</code> would be fixed after <code>split</code> is called, since the lifetime\nappears in the return type, <code>SplitSink&lt;Connection&lt;...&gt;, &amp;ToClient&gt;</code>. Thus, this lifetime\noutlives any scoped local variables created after the <code>split</code> call, such as <code>msg</code> in the\n<code>loop</code>.</p>\n<p>If we want to use the message after sending it to the client, we would have to clone it,\nwhich may be inefficient or impossible. Thus, there is another approach:</p>\n<h6 id=\"clone-the-connection\"><a class=\"doc-anchor\" href=\"#clone-the-connection\">§</a>Clone the connection</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_std::task::spawn;\n<span class=\"kw\">use </span>futures::{future::{join, FutureExt}, sink::SinkExt, stream::StreamExt};\n<span class=\"kw\">use </span>tide_disco::{error::ServerError, socket::Connection, Api};\n\napi.socket(<span class=\"string\">\"endpoint\"</span>, |_req, <span class=\"kw-2\">mut </span>conn: Connection&lt;i32, i32, ServerError, StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;&gt;, _state| <span class=\"kw\">async move </span>{\n    <span class=\"kw\">let </span>recv = {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>conn = conn.clone();\n        spawn(<span class=\"kw\">async move </span>{\n            <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(msg)) = conn.next().<span class=\"kw\">await </span>{\n                <span class=\"comment\">// Handle message from client.\n            </span>}\n        })\n    };\n    <span class=\"kw\">let </span>send = spawn(<span class=\"kw\">async move </span>{\n        <span class=\"kw\">loop </span>{\n            <span class=\"kw\">let </span>msg = <span class=\"comment\">// get message to send to client\n            </span>conn.send(<span class=\"kw-2\">&amp;</span>msg).<span class=\"kw\">await</span>;\n            <span class=\"comment\">// msg is still live at this point.\n            </span>drop(msg);\n        }\n    });\n\n    join(send, recv).<span class=\"kw\">await</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}.boxed());</code></pre></div>\n<p>Depending on the exact situation, this method may end up being more verbose than the\nprevious example. But it allows us to retain the higher-ranked trait bound <code>conn: for&lt;'a&gt; Sink&lt;&amp;'a ToClient&gt;</code> instead of fixing the lifetime, which can prevent an unnecessary clone\nin certain situations.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>If the route <code>name</code> does not exist in the API specification, or if the route already has a\nhandler registered, an error is returned. Note that all routes are initialized with a\ndefault handler that echoes parameters and shows documentation, but this default handler can\nreplaced by this function without raising [ApiError::HandlerAlreadyRegistered].</p>\n<p>If the route <code>name</code> exists, but the method is not SOCKET (that is, <code>METHOD = \"M\"</code> was used\nin the route definition in <code>api.toml</code>, with <code>M</code> other than <code>SOCKET</code>) the error\n<a href=\"ApiError::IncorrectMethod\">IncorrectMethod</a> is returned.</p>\n<h5 id=\"limitations-5\"><a class=\"doc-anchor\" href=\"#limitations-5\">§</a>Limitations</h5>\n<p><a href=\"crate#boxed-futures\">Like many function parameters</a> in <a href=\"crate\">tide_disco</a>, the\nhandler function is required to return a [BoxFuture].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">stream</a>&lt;F, Msg&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;State</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Stream&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Msg, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    Msg: 'static + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    Error: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a uni-directional handler for a SOCKET route.</p>\n<p>This function is very similar to <a href=\"Self::socket\">socket</a>, but it permits the handler only to\nsend messages to the client, not to receive messages back. As such, the handler does not\ntake a <a href=\"socket::Connection\">Connection</a>. Instead, it simply returns a stream of messages\nwhich are forwarded to the client as they are generated. If the stream ever yields an error,\nthe error is propagated to the client and then the connection is closed.</p>\n<p>This function can be simpler to use than <a href=\"Self::socket\">socket</a> in case the handler does not\nneed to receive messages from the client.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metrics\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">metrics</a>&lt;F, T&gt;(\n    &amp;mut self,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    handler: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Api&lt;State, Error, VER&gt;, ApiError&gt;<div class=\"where\">where\n    F: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(RequestParams, &amp;&lt;State as ReadState&gt;::State) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, T&gt;, Error&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt;,\n    T: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Metrics,\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + ReadState,\n    Error: 'static,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Register a handler for a METRICS route.</p>\n<p>When the server receives any request whose URL matches the pattern for this route and whose\nheaders indicate it is a request for metrics, the server will invoke this <code>handler</code> instead\nof the regular HTTP handler for the endpoint. Instead of returning a typed object to\nserialize, <code>handler</code> will return a [Metrics] object which will be serialized to plaintext\nusing the Prometheus format.</p>\n<p>A request is considered a request for metrics, for the purpose of dispatching to this\nhandler, if the method is GET and the <code>Accept</code> header specifies <code>text/plain</code> as a better\nresponse type than <code>application/json</code> and <code>application/octet-stream</code> (other Tide Disco\nhandlers respond to the content types <code>application/json</code> or <code>application/octet-stream</code>). As\na special case, a request with no <code>Accept</code> header or <code>Accept: *</code> will return metrics when\nthere is a metrics route matching the request URL, since metrics are given priority over\nother content types when multiple routes match the URL.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>A metrics endpoint which keeps track of how many times it has been called.</p>\n<p><code>api.toml</code></p>\n<div class=\"example-wrap\"><pre class=\"language-toml\"><code>[route.metrics]\nPATH = [&quot;/metrics&quot;]\nMETHOD = &quot;METRICS&quot;\nDOC = &quot;Export Prometheus metrics.&quot;</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>prometheus::{Counter, Registry};\n\n<span class=\"kw\">struct </span>State {\n    counter: Counter,\n    metrics: Registry,\n}\n<span class=\"kw\">type </span>StaticVer01 = StaticVersion&lt;<span class=\"number\">0</span>, <span class=\"number\">1</span>&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>api: Api&lt;Mutex&lt;State&gt;, ServerError, StaticVer01&gt;;\napi.metrics(<span class=\"string\">\"metrics\"</span>, |_req, state| <span class=\"kw\">async move </span>{\n    state.counter.inc();\n    <span class=\"prelude-val\">Ok</span>(Cow::Borrowed(<span class=\"kw-2\">&amp;</span>state.metrics))\n}.boxed())<span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>If the route <code>name</code> does not exist in the API specification, or if the route already has a\nhandler registered, an error is returned. Note that all routes are initialized with a\ndefault handler that echoes parameters and shows documentation, but this default handler can\nreplaced by this function without raising [ApiError::HandlerAlreadyRegistered].</p>\n<p>If the route <code>name</code> exists, but the method is not METRICS (that is, <code>METHOD = \"M\"</code> was used\nin the route definition in <code>api.toml</code>, with <code>M</code> other than <code>METRICS</code>) the error\n<a href=\"ApiError::IncorrectMethod\">IncorrectMethod</a> is returned.</p>\n<h5 id=\"limitations-6\"><a class=\"doc-anchor\" href=\"#limitations-6\">§</a>Limitations</h5>\n<p><a href=\"crate#boxed-futures\">Like many function parameters</a> in <a href=\"crate\">tide_disco</a>, the\nhandler function is required to return a [BoxFuture].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_health_check\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_health_check</a>&lt;H&gt;(\n    &amp;mut self,\n    handler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;State</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = H&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + '_&gt;&gt; + 'static,\n) -&gt; &amp;mut Api&lt;State, Error, VER&gt;<div class=\"where\">where\n    State: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    H: 'static + HealthCheck,\n    VER: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Set the health check handler for this API.</p>\n<p>This overrides the existing handler. If <code>health_check</code> has not yet been called, the default\nhandler is one which simply returns <code>Health::default()</code>.</p>\n</div></details></div></details>",0,"sequencer::api::endpoints::AvailabilityApi","sequencer::api::endpoints::ExplorerApi","sequencer::api::endpoints::MerklizedStateApi"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Api%3CState,+Error,+VER%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Api%3CState,+Error,+VER%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;State, Error, VER&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Api&lt;State, Error, VER&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, __f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sequencer::api::endpoints::AvailabilityApi","sequencer::api::endpoints::ExplorerApi","sequencer::api::endpoints::MerklizedStateApi"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[57756]}